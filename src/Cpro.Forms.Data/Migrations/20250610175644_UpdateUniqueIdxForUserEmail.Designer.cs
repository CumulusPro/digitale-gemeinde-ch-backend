// <auto-generated />
using System;
using Cpro.Forms.Data.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cpro.Forms.Data.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20250610175644_UpdateUniqueIdxForUserEmail")]
    partial class UpdateUniqueIdxForUserEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("DocumentIdSequence", "dbo")
                .StartsAt(100000L);

            modelBuilder.Entity("Cpro.Forms.Data.Models.Designer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DesignerId")
                        .HasColumnType("int");

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormDesignId");

                    b.ToTable("Designer");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.DesignerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DesignerHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormVersion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDesignId");

                    b.ToTable("DesignerHistory");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormDatas");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesign", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormDesigns");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesignHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormDesignsHistory");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesignTag", b =>
                {
                    b.Property<string>("FormDesignId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("FormDesignId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FormDesignTags");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormStatesConfig", b =>
                {
                    b.Property<int>("FormStatesConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormStatesConfigId"));

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormStatesConfigId");

                    b.HasIndex("FormDesignId");

                    b.ToTable("FormStatesConfig");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormStatesConfigHistory", b =>
                {
                    b.Property<int>("FormStatesConfigHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormStatesConfigHistoryId"));

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormVersion")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormStatesConfigHistoryId");

                    b.HasIndex("FormDesignId");

                    b.ToTable("FormStatesConfigHistory");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDesignId");

                    b.ToTable("Processor");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.ProcessorHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormDesignId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FormVersion")
                        .HasColumnType("int");

                    b.Property<int>("ProcessorHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDesignId");

                    b.ToTable("ProcessorHistory");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Tenant.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET() AT TIME ZONE 'UTC'");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET() AT TIME ZONE 'UTC'");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Designer", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesign", null)
                        .WithMany("Designers")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.DesignerHistory", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesignHistory", null)
                        .WithMany("Designers")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesignTag", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesign", "FormDesign")
                        .WithMany("Tags")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpro.Forms.Data.Models.Tag", "Tag")
                        .WithMany("FormDesignTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDesign");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormStatesConfig", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesign", null)
                        .WithMany("FormStates")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormStatesConfigHistory", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesignHistory", null)
                        .WithMany("FormStates")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Processor", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesign", null)
                        .WithMany("Processors")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.ProcessorHistory", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.FormDesignHistory", null)
                        .WithMany("Processors")
                        .HasForeignKey("FormDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.User.User", b =>
                {
                    b.HasOne("Cpro.Forms.Data.Models.Tenant.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasPrincipalKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesign", b =>
                {
                    b.Navigation("Designers");

                    b.Navigation("FormStates");

                    b.Navigation("Processors");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.FormDesignHistory", b =>
                {
                    b.Navigation("Designers");

                    b.Navigation("FormStates");

                    b.Navigation("Processors");
                });

            modelBuilder.Entity("Cpro.Forms.Data.Models.Tag", b =>
                {
                    b.Navigation("FormDesignTags");
                });
#pragma warning restore 612, 618
        }
    }
}
